trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - 'v*'

strategy:
  matrix:
    MacOs CPython3.5:
      image: 'macos-latest'
      python.version: '3.5'
      python.architecture: 'x64'
    MacOs CPython3.6:
      image: 'macos-latest'
      python.version: '3.6'
      python.architecture: 'x64'
    MacOs CPython3.7:
      image: 'macos-latest'
      python.version: '3.7'
      python.architecture: 'x64'
    MacOs CPython3.8:
      image: 'macos-latest'
      python.version: '3.8'
      python.architecture: 'x64'
    MacOs CPython3.9:
      image: 'macos-latest'
      python.version: '3.9'
      python.architecture: 'x64'
    MacOs PyPy3:
      image: 'macos-latest'
      python.version: 'pypy3'
      python.architecture: 'x64'
    Ubuntu CPython3.5:
      image: 'ubuntu-latest'
      python.version: '3.5'
      python.architecture: 'x64'
    Ubuntu CPython3.6:
      image: 'ubuntu-latest'
      python.version: '3.6'
      python.architecture: 'x64'
    Ubuntu CPython3.7:
      image: 'ubuntu-latest'
      python.version: '3.7'
      python.architecture: 'x64'
    Ubuntu CPython3.8:
      image: 'ubuntu-latest'
      python.version: '3.8'
      python.architecture: 'x64'
    Ubuntu CPython3.9:
      image: 'ubuntu-latest'
      python.version: '3.9'
      python.architecture: 'x64'
    Ubuntu PyPy3:
      image: 'ubuntu-latest'
      python.version: 'pypy3'
      python.architecture: 'x64'
    Windows CPython3.5 (x86):
      image: 'windows-latest'
      python.version: '3.5'
      python.architecture: 'x86'
    Windows CPython3.5 (x64):
      image: 'windows-latest'
      python.version: '3.5'
      python.architecture: 'x64'
    Windows CPython3.6 (x86):
      image: 'windows-latest'
      python.version: '3.6'
      python.architecture: 'x86'
    Windows CPython3.6 (x64):
      image: 'windows-latest'
      python.version: '3.6'
      python.architecture: 'x64'
    Windows CPython3.7 (x86):
      image: 'windows-latest'
      python.version: '3.7'
      python.architecture: 'x86'
    Windows CPython3.7 (x64):
      image: 'windows-latest'
      python.version: '3.7'
      python.architecture: 'x64'
    Windows CPython3.8 (x86):
      image: 'windows-latest'
      python.version: '3.8'
      python.architecture: 'x86'
    Windows CPython3.8 (x64):
      image: 'windows-latest'
      python.version: '3.8'
      python.architecture: 'x64'
    Windows CPython3.9 (x86):
      image: 'windows-latest'
      python.version: '3.9'
      python.architecture: 'x86'
    Windows CPython3.9 (x64):
      image: 'windows-latest'
      python.version: '3.9'
      python.architecture: 'x64'
    Windows PyPy3:
      image: 'windows-latest'
      python.version: 'pypy3'
      python.architecture: 'x86'

pool:
  vmImage: $(image)

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: '$(python.architecture)'
  - script: python -m pip install --upgrade pip setuptools
    displayName: 'Install packaging tools'
  - script: python -m pip install --force-reinstall -r requirements-tests.txt
    displayName: 'Install tests requirements'
  - script: python -m pip install -e .
    displayName: 'Install in editable mode'
    env:
      CXXFLAGS: --coverage -O0
  - script: pytest
    displayName: 'Run tests'
  - script: python -m doctest README.md
    displayName: 'Run doctests'
  - script: python -m pip install --upgrade codecov
    condition: succeeded()
    displayName: 'Install codecov'
  - script: python -m codecov -f coverage.xml -X gcov
    condition: succeeded()
    displayName: 'Upload coverage'
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)
  - script: python -m pip install --upgrade cibuildwheel
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Install build requirements'
  - bash:
      CIBW_BUILD=$(python -c 'import sys; print("cp" + "".join(map(str, sys.version_info[:2])) + "-*")')
      cibuildwheel --output-dir dist
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Build wheels'
  - script: python -m pip install --upgrade twine
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Install deployment requirements'
  - script: twine upload --skip-existing dist/*
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Deploy wheels'
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: $(TWINE_PASSWORD)
